====================
	Header:
====================

String to_string(ShaderPolygonMode const obj);
    ShaderPolygonMode parse_to_shader_polygon_mode(String const& string);
    Bool parse_try_shader_polygon_mode(String const& string, ShaderPolygonMode& value);
    template<>
    inline ShaderPolygonMode parse_to<ShaderPolygonMode>(String const& string) { return parse_to_shader_polygon_mode(string); }
    template<>
    inline Bool parse_try<ShaderPolygonMode>(String const& string, ShaderPolygonMode& value) { return parse_try_shader_polygon_mode(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(ShaderPolygonMode const obj)
{
    switch (obj)
	{
		case ShaderPolygonMode::Fill: return "Fill";
		case ShaderPolygonMode::Line: return "Line";
		case ShaderPolygonMode::Point: return "Point";

		default: return "";
	}
}

ShaderPolygonMode Minty::parse_to_shader_polygon_mode(String const& string)
{
	if (string == "Fill") return ShaderPolygonMode::Fill;
	if (string == "Line") return ShaderPolygonMode::Line;
	if (string == "Point") return ShaderPolygonMode::Point;

	return ShaderPolygonMode();
}

Bool Minty::parse_try_shader_polygon_mode(String const& string, ShaderPolygonMode& value)
{
	value = parse_to_shader_polygon_mode(string);
	return value != ShaderPolygonMode();
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_ShaderPolygonMode(Test& _test);

====================
	Test Source:
====================

#include "Test_ShaderPolygonMode.h"
#include "Minty.h"

void test_ShaderPolygonMode(Test& _test)
{
	CATEGORY(ShaderPolygonMode)
	{
        std::vector<std::pair<ShaderPolygonMode, String>> VALUES = {
			{ShaderPolygonMode::Fill, "Fill"},
			{ShaderPolygonMode::Line, "Line"},
			{ShaderPolygonMode::Point, "Point"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_shader_polygon_mode(name), value);
            }

            EXPECT_EQUAL(parse_to_shader_polygon_mode(""), ShaderPolygonMode());
        }

        TEST("Parse Try")
        {
            ShaderPolygonMode result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_shader_polygon_mode(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_shader_polygon_mode("", result));
            EXPECT_EQUAL(result, ShaderPolygonMode());
        }
	}
}
