====================
	Header:
====================

String to_string(ShaderPrimitiveTopology const obj);
    ShaderPrimitiveTopology parse_to_shader_primitive_topology(String const& string);
    Bool parse_try_shader_primitive_topology(String const& string, ShaderPrimitiveTopology& value);
    template<>
    inline ShaderPrimitiveTopology parse_to<ShaderPrimitiveTopology>(String const& string) { return parse_to_shader_primitive_topology(string); }
    template<>
    inline Bool parse_try<ShaderPrimitiveTopology>(String const& string, ShaderPrimitiveTopology& value) { return parse_try_shader_primitive_topology(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(ShaderPrimitiveTopology const obj)
{
    switch (obj)
	{
		case ShaderPrimitiveTopology::PointList: return "PointList";
		case ShaderPrimitiveTopology::LineList: return "LineList";
		case ShaderPrimitiveTopology::LineStrip: return "LineStrip";
		case ShaderPrimitiveTopology::TriangleList: return "TriangleList";
		case ShaderPrimitiveTopology::TriangleStrip: return "TriangleStrip";
		case ShaderPrimitiveTopology::TriangleFan: return "TriangleFan";

		default: return "";
	}
}

ShaderPrimitiveTopology Minty::parse_to_shader_primitive_topology(String const& string)
{
	if (string == "PointList") return ShaderPrimitiveTopology::PointList;
	if (string == "LineList") return ShaderPrimitiveTopology::LineList;
	if (string == "LineStrip") return ShaderPrimitiveTopology::LineStrip;
	if (string == "TriangleList") return ShaderPrimitiveTopology::TriangleList;
	if (string == "TriangleStrip") return ShaderPrimitiveTopology::TriangleStrip;
	if (string == "TriangleFan") return ShaderPrimitiveTopology::TriangleFan;

	return ShaderPrimitiveTopology();
}

Bool Minty::parse_try_shader_primitive_topology(String const& string, ShaderPrimitiveTopology& value)
{
	value = parse_to_shader_primitive_topology(string);
	return value != ShaderPrimitiveTopology();
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_ShaderPrimitiveTopology(Test& _test);

====================
	Test Source:
====================

#include "Test_ShaderPrimitiveTopology.h"
#include "Minty.h"

void test_ShaderPrimitiveTopology(Test& _test)
{
	CATEGORY(ShaderPrimitiveTopology)
	{
        std::vector<std::pair<ShaderPrimitiveTopology, String>> VALUES = {
			{ShaderPrimitiveTopology::PointList, "PointList"},
			{ShaderPrimitiveTopology::LineList, "LineList"},
			{ShaderPrimitiveTopology::LineStrip, "LineStrip"},
			{ShaderPrimitiveTopology::TriangleList, "TriangleList"},
			{ShaderPrimitiveTopology::TriangleStrip, "TriangleStrip"},
			{ShaderPrimitiveTopology::TriangleFan, "TriangleFan"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_shader_primitive_topology(name), value);
            }

            EXPECT_EQUAL(parse_to_shader_primitive_topology(""), ShaderPrimitiveTopology());
        }

        TEST("Parse Try")
        {
            ShaderPrimitiveTopology result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_shader_primitive_topology(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_shader_primitive_topology("", result));
            EXPECT_EQUAL(result, ShaderPrimitiveTopology());
        }
	}
}
