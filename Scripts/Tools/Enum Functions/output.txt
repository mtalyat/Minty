====================
	Header:
====================

#include "Minty/Serialization/Parse.h"
#include "Minty/Serialization/ToString.h"

    String to_string(Shape const obj);
    Shape parse_to_shape(String const& string);
    Bool parse_try_shape(String const& string, Shape& value);
    template<>
    inline Shape parse_to<Shape>(String const& string) { return parse_to_shape(string); }
    template<>
    inline Bool parse_try<Shape>(String const& string, Shape& value) { return parse_try_shape(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(Shape const obj)
{
    switch (obj)
	{
		case Shape::Empty: return "Empty";
		case Shape::Box: return "Box";
		case Shape::Sphere: return "Sphere";
		case Shape::Capsule: return "Capsule";
		case Shape::Cylinder: return "Cylinder";
		case Shape::Cone: return "Cone";
		case Shape::Custom: return "Custom";

		default: return "";
	}
}

Shape Minty::parse_to_shape(String const& string)
{
	if (string == "Empty") return Shape::Empty;
	if (string == "Box") return Shape::Box;
	if (string == "Sphere") return Shape::Sphere;
	if (string == "Capsule") return Shape::Capsule;
	if (string == "Cylinder") return Shape::Cylinder;
	if (string == "Cone") return Shape::Cone;
	if (string == "Custom") return Shape::Custom;

	return Shape();
}

Bool Minty::parse_try_shape(String const& string, Shape& value)
{
	value = parse_to_shape(string);
	return true;
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_Shape(Test& _test);

====================
	Test Source:
====================

#include "Test_Shape.h"
#include "Minty.h"

void test_Shape(Test& _test)
{
	CATEGORY(Shape)
	{
        std::vector<std::pair<Shape, String>> VALUES = {
			{Shape::Empty, "Empty"},
			{Shape::Box, "Box"},
			{Shape::Sphere, "Sphere"},
			{Shape::Capsule, "Capsule"},
			{Shape::Cylinder, "Cylinder"},
			{Shape::Cone, "Cone"},
			{Shape::Custom, "Custom"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_shape(name), value);
            }

            EXPECT_EQUAL(parse_to_shape(""), Shape());
        }

        TEST("Parse Try")
        {
            Shape result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_shape(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_shape("", result));
            EXPECT_EQUAL(result, Shape());
        }
	}
}
