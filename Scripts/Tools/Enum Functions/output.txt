====================
	Header:
====================

String to_string(StoreOperation const obj);
    StoreOperation parse_to_store_operation(String const& string);
    Bool parse_try_store_operation(String const& string, StoreOperation& value);
    template<>
    inline StoreOperation parse_to<StoreOperation>(String const& string) { return parse_to_store_operation(string); }
    template<>
    inline Bool parse_try<StoreOperation>(String const& string, StoreOperation& value) { return parse_try_store_operation(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(StoreOperation const obj)
{
    switch (obj)
	{
		case StoreOperation::DontCare: return "DontCare";
		case StoreOperation::Store: return "Store";

		default: return "";
	}
}

StoreOperation Minty::parse_to_store_operation(String const& string)
{
	if (string == "DontCare") return StoreOperation::DontCare;
	if (string == "Store") return StoreOperation::Store;

	return StoreOperation();
}

Bool Minty::parse_try_store_operation(String const& string, StoreOperation& value)
{
	value = parse_to_store_operation(string);
	return value != StoreOperation();
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_StoreOperation(Test& _test);

====================
	Test Source:
====================

#include "Test_StoreOperation.h"
#include "Minty.h"

void test_StoreOperation(Test& _test)
{
	CATEGORY(StoreOperation)
	{
        std::vector<std::pair<StoreOperation, String>> VALUES = {
			{StoreOperation::DontCare, "DontCare"},
			{StoreOperation::Store, "Store"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_store_operation(name), value);
            }

            EXPECT_EQUAL(parse_to_store_operation(""), StoreOperation());
        }

        TEST("Parse Try")
        {
            StoreOperation result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_store_operation(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_store_operation("", result));
            EXPECT_EQUAL(result, StoreOperation());
        }
	}
}
