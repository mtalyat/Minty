====================
	Header:
====================

String to_string(ShaderStage const obj);
    ShaderStage parse_to_shader_stage(String const& string);
    Bool parse_try_shader_stage(String const& string, ShaderStage& value);
    template<>
    inline ShaderStage parse_to<ShaderStage>(String const& string) { return parse_to_shader_stage(string); }
    template<>
    inline Bool parse_try<ShaderStage>(String const& string, ShaderStage& value) { return parse_try_shader_stage(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(ShaderStage const obj)
{
    switch (obj)
	{
		case ShaderStage::Vertex: return "Vertex";
		case ShaderStage::Fragment: return "Fragment";

		default: return "";
	}
}

ShaderStage Minty::parse_to_shader_stage(String const& string)
{
	if (string == "Vertex") return ShaderStage::Vertex;
	if (string == "Fragment") return ShaderStage::Fragment;

	return ShaderStage();
}

Bool Minty::parse_try_shader_stage(String const& string, ShaderStage& value)
{
	value = parse_to_shader_stage(string);
	return value != ShaderStage();
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_ShaderStage(Test& _test);

====================
	Test Source:
====================

#include "Test_ShaderStage.h"
#include "Minty.h"

void test_ShaderStage(Test& _test)
{
	CATEGORY(ShaderStage)
	{
        std::vector<std::pair<ShaderStage, String>> VALUES = {
			{ShaderStage::Vertex, "Vertex"},
			{ShaderStage::Fragment, "Fragment"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_shader_stage(name), value);
            }

            EXPECT_EQUAL(parse_to_shader_stage(""), ShaderStage());
        }

        TEST("Parse Try")
        {
            ShaderStage result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_shader_stage(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_shader_stage("", result));
            EXPECT_EQUAL(result, ShaderStage());
        }
	}
}
