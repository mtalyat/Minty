====================
	Header:
====================

String to_string(Filter const obj);
    Filter parse_to_filter(String const& string);
    Bool parse_try_filter(String const& string, Filter& value);
    template<>
    inline Filter parse_to<Filter>(String const& string) { return parse_to_filter(string); }
    template<>
    inline Bool parse_try<Filter>(String const& string, Filter& value) { return parse_try_filter(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(Filter const obj)
{
    switch (obj)
	{
		case Filter::Nearest: return "Nearest";
		case Filter::Linear: return "Linear";

		default: return "";
	}
}

Filter Minty::parse_to_filter(String const& string)
{
	if (string == "Nearest") return Filter::Nearest;
	if (string == "Linear") return Filter::Linear;

	return Filter();
}

Bool Minty::parse_try_filter(String const& string, Filter& value)
{
	value = parse_to_filter(string);
	return value != Filter();
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_Filter(Test& _test);

====================
	Test Source:
====================

#include "Test_Filter.h"
#include "Minty.h"

void test_Filter(Test& _test)
{
	CATEGORY(Filter)
	{
        std::vector<std::pair<Filter, String>> VALUES = {
			{Filter::Nearest, "Nearest"},
			{Filter::Linear, "Linear"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_filter(name), value);
            }

            EXPECT_EQUAL(parse_to_filter(""), Filter());
        }

        TEST("Parse Try")
        {
            Filter result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_filter(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_filter("", result));
            EXPECT_EQUAL(result, Filter());
        }
	}
}
