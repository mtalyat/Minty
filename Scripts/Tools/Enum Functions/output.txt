====================
	Header:
====================

String to_string(ImageAspect const obj);
    ImageAspect parse_to_image_aspect(String const& string);
    Bool parse_try_image_aspect(String const& string, ImageAspect& value);
    template<>
    inline ImageAspect parse_to<ImageAspect>(String const& string) { return parse_to_image_aspect(string); }
    template<>
    inline Bool parse_try<ImageAspect>(String const& string, ImageAspect& value) { return parse_try_image_aspect(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(ImageAspect const obj)
{
    switch (obj)
	{
		case ImageAspect::Color: return "Color";
		case ImageAspect::Depth: return "Depth";

		default: return "";
	}
}

ImageAspect Minty::parse_to_image_aspect(String const& string)
{
	if (string == "Color") return ImageAspect::Color;
	if (string == "Depth") return ImageAspect::Depth;

	return ImageAspect();
}

Bool Minty::parse_try_image_aspect(String const& string, ImageAspect& value)
{
	value = parse_to_image_aspect(string);
	return value != ImageAspect();
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_ImageAspect(Test& _test);

====================
	Test Source:
====================

#include "Test_ImageAspect.h"
#include "Minty.h"

void test_ImageAspect(Test& _test)
{
	CATEGORY(ImageAspect)
	{
        std::vector<std::pair<ImageAspect, String>> VALUES = {
			{ImageAspect::Color, "Color"},
			{ImageAspect::Depth, "Depth"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_image_aspect(name), value);
            }

            EXPECT_EQUAL(parse_to_image_aspect(""), ImageAspect());
        }

        TEST("Parse Try")
        {
            ImageAspect result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_image_aspect(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_image_aspect("", result));
            EXPECT_EQUAL(result, ImageAspect());
        }
	}
}
