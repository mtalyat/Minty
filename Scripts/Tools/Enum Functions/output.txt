====================
	Header:
====================

#include "Minty/Serialization/Parse.h"
#include "Minty/Serialization/ToString.h"

    String to_string(AnimationActionType const obj);
    AnimationActionType parse_to_animation_action_type(String const& string);
    Bool parse_try_animation_action_type(String const& string, AnimationActionType& value);
    template<>
    inline AnimationActionType parse_to<AnimationActionType>(String const& string) { return parse_to_animation_action_type(string); }
    template<>
    inline Bool parse_try<AnimationActionType>(String const& string, AnimationActionType& value) { return parse_try_animation_action_type(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(AnimationActionType const obj)
{
    switch (obj)
	{
		case AnimationActionType::None: return "None";
		case AnimationActionType::Add: return "Add";
		case AnimationActionType::Remove: return "Remove";

		default: return "";
	}
}

AnimationActionType Minty::parse_to_animation_action_type(String const& string)
{
	if (string == "None") return AnimationActionType::None;
	if (string == "Add") return AnimationActionType::Add;
	if (string == "Remove") return AnimationActionType::Remove;

	return AnimationActionType();
}

Bool Minty::parse_try_animation_action_type(String const& string, AnimationActionType& value)
{
	value = parse_to_animation_action_type(string);
	return true;
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_AnimationActionType(Test& _test);

====================
	Test Source:
====================

#include "Test_AnimationActionType.h"
#include "Minty.h"

void test_AnimationActionType(Test& _test)
{
	CATEGORY(AnimationActionType)
	{
        std::vector<std::pair<AnimationActionType, String>> VALUES = {
			{AnimationActionType::None, "None"},
			{AnimationActionType::Add, "Add"},
			{AnimationActionType::Remove, "Remove"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_animation_action_type(name), value);
            }

            EXPECT_EQUAL(parse_to_animation_action_type(""), AnimationActionType());
        }

        TEST("Parse Try")
        {
            AnimationActionType result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_animation_action_type(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_animation_action_type("", result));
            EXPECT_EQUAL(result, AnimationActionType());
        }
	}
}
