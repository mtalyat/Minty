====================
	Header:
====================

String to_string(MeshType const obj);
    MeshType parse_to_mesh_type(String const& string);
    Bool parse_try_mesh_type(String const& string, MeshType& value);
    template<>
    inline MeshType parse_to<MeshType>(String const& string) { return parse_to_mesh_type(string); }
    template<>
    inline Bool parse_try<MeshType>(String const& string, MeshType& value) { return parse_try_mesh_type(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(MeshType const obj)
{
    switch (obj)
	{
		case MeshType::Empty: return "Empty";
		case MeshType::Custom: return "Custom";
		case MeshType::Quad: return "Quad";
		case MeshType::Cube: return "Cube";

		default: return "";
	}
}

MeshType Minty::parse_to_mesh_type(String const& string)
{
	if (string == "Empty") return MeshType::Empty;
	if (string == "Custom") return MeshType::Custom;
	if (string == "Quad") return MeshType::Quad;
	if (string == "Cube") return MeshType::Cube;

	return MeshType();
}

Bool Minty::parse_try_mesh_type(String const& string, MeshType& value)
{
	value = parse_to_mesh_type(string);
	return value != MeshType();
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_MeshType(Test& _test);

====================
	Test Source:
====================

#include "Test_MeshType.h"
#include "Minty.h"

void test_MeshType(Test& _test)
{
	CATEGORY(MeshType)
	{
        std::vector<std::pair<MeshType, String>> VALUES = {
			{MeshType::Empty, "Empty"},
			{MeshType::Custom, "Custom"},
			{MeshType::Quad, "Quad"},
			{MeshType::Cube, "Cube"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_mesh_type(name), value);
            }

            EXPECT_EQUAL(parse_to_mesh_type(""), MeshType());
        }

        TEST("Parse Try")
        {
            MeshType result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_mesh_type(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_mesh_type("", result));
            EXPECT_EQUAL(result, MeshType());
        }
	}
}
