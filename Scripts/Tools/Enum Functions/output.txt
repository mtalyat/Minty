====================
	Header:
====================

String to_string(ImageTiling const obj);
    ImageTiling parse_to_image_tiling(String const& string);
    Bool parse_try_image_tiling(String const& string, ImageTiling& value);
    template<>
    inline ImageTiling parse_to<ImageTiling>(String const& string) { return parse_to_image_tiling(string); }
    template<>
    inline Bool parse_try<ImageTiling>(String const& string, ImageTiling& value) { return parse_try_image_tiling(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(ImageTiling const obj)
{
    switch (obj)
	{
		case ImageTiling::Optimal: return "Optimal";
		case ImageTiling::Linear: return "Linear";

		default: return "";
	}
}

ImageTiling Minty::parse_to_image_tiling(String const& string)
{
	if (string == "Optimal") return ImageTiling::Optimal;
	if (string == "Linear") return ImageTiling::Linear;

	return ImageTiling();
}

Bool Minty::parse_try_image_tiling(String const& string, ImageTiling& value)
{
	value = parse_to_image_tiling(string);
	return value != ImageTiling();
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_ImageTiling(Test& _test);

====================
	Test Source:
====================

#include "Test_ImageTiling.h"
#include "Minty.h"

void test_ImageTiling(Test& _test)
{
	CATEGORY(ImageTiling)
	{
        std::vector<std::pair<ImageTiling, String>> VALUES = {
			{ImageTiling::Optimal, "Optimal"},
			{ImageTiling::Linear, "Linear"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_image_tiling(name), value);
            }

            EXPECT_EQUAL(parse_to_image_tiling(""), ImageTiling());
        }

        TEST("Parse Try")
        {
            ImageTiling result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_image_tiling(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_image_tiling("", result));
            EXPECT_EQUAL(result, ImageTiling());
        }
	}
}
