====================
	Header:
====================

#include "Minty/Serialization/Parse.h"
#include "Minty/Serialization/ToString.h"

    String to_string(AssetType const obj);
    AssetType parse_to_asset_type(String const& string);
    Bool parse_try_asset_type(String const& string, AssetType& value);
    template<>
    inline AssetType parse_to<AssetType>(String const& string) { return parse_to_asset_type(string); }
    template<>
    inline Bool parse_try<AssetType>(String const& string, AssetType& value) { return parse_try_asset_type(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(AssetType const obj)
{
    switch (obj)
	{
		case AssetType::Generic: return "Generic";
		case AssetType::Wrap: return "Wrap";
		case AssetType::Script: return "Script";
		case AssetType::AudioClip: return "AudioClip";
		case AssetType::Animation: return "Animation";
		case AssetType::Animator: return "Animator";
		case AssetType::Viewport: return "Viewport";
		case AssetType::Image: return "Image";
		case AssetType::Texture: return "Texture";
		case AssetType::Surface: return "Surface";
		case AssetType::RenderPass: return "RenderPass";
		case AssetType::RenderTarget: return "RenderTarget";
		case AssetType::Camera: return "Camera";
		case AssetType::ShaderCode: return "ShaderCode";
		case AssetType::ShaderModule: return "ShaderModule";
		case AssetType::Shader: return "Shader";
		case AssetType::MaterialTemplate: return "MaterialTemplate";
		case AssetType::Material: return "Material";
		case AssetType::Sprite: return "Sprite";
		case AssetType::FontVariant: return "FontVariant";
		case AssetType::Font: return "Font";
		case AssetType::Mesh: return "Mesh";
		case AssetType::Scene: return "Scene";

		default: return "";
	}
}

AssetType Minty::parse_to_asset_type(String const& string)
{
	if (string == "Generic") return AssetType::Generic;
	if (string == "Wrap") return AssetType::Wrap;
	if (string == "Script") return AssetType::Script;
	if (string == "AudioClip") return AssetType::AudioClip;
	if (string == "Animation") return AssetType::Animation;
	if (string == "Animator") return AssetType::Animator;
	if (string == "Viewport") return AssetType::Viewport;
	if (string == "Image") return AssetType::Image;
	if (string == "Texture") return AssetType::Texture;
	if (string == "Surface") return AssetType::Surface;
	if (string == "RenderPass") return AssetType::RenderPass;
	if (string == "RenderTarget") return AssetType::RenderTarget;
	if (string == "Camera") return AssetType::Camera;
	if (string == "ShaderCode") return AssetType::ShaderCode;
	if (string == "ShaderModule") return AssetType::ShaderModule;
	if (string == "Shader") return AssetType::Shader;
	if (string == "MaterialTemplate") return AssetType::MaterialTemplate;
	if (string == "Material") return AssetType::Material;
	if (string == "Sprite") return AssetType::Sprite;
	if (string == "FontVariant") return AssetType::FontVariant;
	if (string == "Font") return AssetType::Font;
	if (string == "Mesh") return AssetType::Mesh;
	if (string == "Scene") return AssetType::Scene;

	return AssetType();
}

Bool Minty::parse_try_asset_type(String const& string, AssetType& value)
{
	value = parse_to_asset_type(string);
	return true;
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_AssetType(Test& _test);

====================
	Test Source:
====================

#include "Test_AssetType.h"
#include "Minty.h"

void test_AssetType(Test& _test)
{
	CATEGORY(AssetType)
	{
        std::vector<std::pair<AssetType, String>> VALUES = {
			{AssetType::Generic, "Generic"},
			{AssetType::Wrap, "Wrap"},
			{AssetType::Script, "Script"},
			{AssetType::AudioClip, "AudioClip"},
			{AssetType::Animation, "Animation"},
			{AssetType::Animator, "Animator"},
			{AssetType::Viewport, "Viewport"},
			{AssetType::Image, "Image"},
			{AssetType::Texture, "Texture"},
			{AssetType::Surface, "Surface"},
			{AssetType::RenderPass, "RenderPass"},
			{AssetType::RenderTarget, "RenderTarget"},
			{AssetType::Camera, "Camera"},
			{AssetType::ShaderCode, "ShaderCode"},
			{AssetType::ShaderModule, "ShaderModule"},
			{AssetType::Shader, "Shader"},
			{AssetType::MaterialTemplate, "MaterialTemplate"},
			{AssetType::Material, "Material"},
			{AssetType::Sprite, "Sprite"},
			{AssetType::FontVariant, "FontVariant"},
			{AssetType::Font, "Font"},
			{AssetType::Mesh, "Mesh"},
			{AssetType::Scene, "Scene"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_asset_type(name), value);
            }

            EXPECT_EQUAL(parse_to_asset_type(""), AssetType());
        }

        TEST("Parse Try")
        {
            AssetType result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_asset_type(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_asset_type("", result));
            EXPECT_EQUAL(result, AssetType());
        }
	}
}
