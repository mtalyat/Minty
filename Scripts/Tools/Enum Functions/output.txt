====================
	Header:
====================

#include "Minty/Serialization/Parse.h"
#include "Minty/Serialization/ToString.h"

    String to_string(MouseButton const obj);
    MouseButton parse_to_mouse_button(String const& string);
    Bool parse_try_mouse_button(String const& string, MouseButton& value);
    template<>
    inline MouseButton parse_to<MouseButton>(String const& string) { return parse_to_mouse_button(string); }
    template<>
    inline Bool parse_try<MouseButton>(String const& string, MouseButton& value) { return parse_try_mouse_button(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(MouseButton const obj)
{
    switch (obj)
	{
		case MouseButton::Button1: return "Button1";
		case MouseButton::Button2: return "Button2";
		case MouseButton::Button3: return "Button3";
		case MouseButton::Button4: return "Button4";
		case MouseButton::Button5: return "Button5";
		case MouseButton::Button6: return "Button6";
		case MouseButton::Button7: return "Button7";
		case MouseButton::Button8: return "Button8";

		default: return "";
	}
}

MouseButton Minty::parse_to_mouse_button(String const& string)
{
	if (string == "Button1") return MouseButton::Button1;
	if (string == "Button2") return MouseButton::Button2;
	if (string == "Button3") return MouseButton::Button3;
	if (string == "Button4") return MouseButton::Button4;
	if (string == "Button5") return MouseButton::Button5;
	if (string == "Button6") return MouseButton::Button6;
	if (string == "Button7") return MouseButton::Button7;
	if (string == "Button8") return MouseButton::Button8;

	return MouseButton();
}

Bool Minty::parse_try_mouse_button(String const& string, MouseButton& value)
{
	value = parse_to_mouse_button(string);
	return true;
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_MouseButton(Test& _test);

====================
	Test Source:
====================

#include "Test_MouseButton.h"
#include "Minty.h"

void test_MouseButton(Test& _test)
{
	CATEGORY(MouseButton)
	{
        std::vector<std::pair<MouseButton, String>> VALUES = {
			{MouseButton::Button1, "Button1"},
			{MouseButton::Button2, "Button2"},
			{MouseButton::Button3, "Button3"},
			{MouseButton::Button4, "Button4"},
			{MouseButton::Button5, "Button5"},
			{MouseButton::Button6, "Button6"},
			{MouseButton::Button7, "Button7"},
			{MouseButton::Button8, "Button8"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_mouse_button(name), value);
            }

            EXPECT_EQUAL(parse_to_mouse_button(""), MouseButton());
        }

        TEST("Parse Try")
        {
            MouseButton result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_mouse_button(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_mouse_button("", result));
            EXPECT_EQUAL(result, MouseButton());
        }
	}
}
