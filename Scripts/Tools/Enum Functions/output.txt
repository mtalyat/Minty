====================
	Header:
====================

String to_string(ShaderCullMode const obj);
    ShaderCullMode parse_to_shader_cull_mode(String const& string);
    Bool parse_try_shader_cull_mode(String const& string, ShaderCullMode& value);
    template<>
    inline ShaderCullMode parse_to<ShaderCullMode>(String const& string) { return parse_to_shader_cull_mode(string); }
    template<>
    inline Bool parse_try<ShaderCullMode>(String const& string, ShaderCullMode& value) { return parse_try_shader_cull_mode(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(ShaderCullMode const obj)
{
    switch (obj)
	{
		case ShaderCullMode::None: return "None";
		case ShaderCullMode::Front: return "Front";
		case ShaderCullMode::Back: return "Back";
		case ShaderCullMode::Both: return "Both";

		default: return "";
	}
}

ShaderCullMode Minty::parse_to_shader_cull_mode(String const& string)
{
	if (string == "None") return ShaderCullMode::None;
	if (string == "Front") return ShaderCullMode::Front;
	if (string == "Back") return ShaderCullMode::Back;
	if (string == "Both") return ShaderCullMode::Both;

	return ShaderCullMode();
}

Bool Minty::parse_try_shader_cull_mode(String const& string, ShaderCullMode& value)
{
	value = parse_to_shader_cull_mode(string);
	return value != ShaderCullMode();
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_ShaderCullMode(Test& _test);

====================
	Test Source:
====================

#include "Test_ShaderCullMode.h"
#include "Minty.h"

void test_ShaderCullMode(Test& _test)
{
	CATEGORY(ShaderCullMode)
	{
        std::vector<std::pair<ShaderCullMode, String>> VALUES = {
			{ShaderCullMode::None, "None"},
			{ShaderCullMode::Front, "Front"},
			{ShaderCullMode::Back, "Back"},
			{ShaderCullMode::Both, "Both"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_shader_cull_mode(name), value);
            }

            EXPECT_EQUAL(parse_to_shader_cull_mode(""), ShaderCullMode());
        }

        TEST("Parse Try")
        {
            ShaderCullMode result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_shader_cull_mode(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_shader_cull_mode("", result));
            EXPECT_EQUAL(result, ShaderCullMode());
        }
	}
}
