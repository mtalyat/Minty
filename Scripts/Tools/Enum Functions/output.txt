====================
	Header:
====================

String to_string(ImageUsage const obj);
    ImageUsage parse_to_image_usage(String const& string);
    Bool parse_try_image_usage(String const& string, ImageUsage& value);
    template<>
    inline ImageUsage parse_to<ImageUsage>(String const& string) { return parse_to_image_usage(string); }
    template<>
    inline Bool parse_try<ImageUsage>(String const& string, ImageUsage& value) { return parse_try_image_usage(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(ImageUsage const obj)
{
    switch (obj)
	{
		case ImageUsage::Sampled: return "Sampled";
		case ImageUsage::Storage: return "Storage";
		case ImageUsage::Color: return "Color";
		case ImageUsage::DepthStencil: return "DepthStencil";

		default: return "";
	}
}

ImageUsage Minty::parse_to_image_usage(String const& string)
{
	if (string == "Sampled") return ImageUsage::Sampled;
	if (string == "Storage") return ImageUsage::Storage;
	if (string == "Color") return ImageUsage::Color;
	if (string == "DepthStencil") return ImageUsage::DepthStencil;

	return ImageUsage();
}

Bool Minty::parse_try_image_usage(String const& string, ImageUsage& value)
{
	value = parse_to_image_usage(string);
	return value != ImageUsage();
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_ImageUsage(Test& _test);

====================
	Test Source:
====================

#include "Test_ImageUsage.h"
#include "Minty.h"

void test_ImageUsage(Test& _test)
{
	CATEGORY(ImageUsage)
	{
        std::vector<std::pair<ImageUsage, String>> VALUES = {
			{ImageUsage::Sampled, "Sampled"},
			{ImageUsage::Storage, "Storage"},
			{ImageUsage::Color, "Color"},
			{ImageUsage::DepthStencil, "DepthStencil"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_image_usage(name), value);
            }

            EXPECT_EQUAL(parse_to_image_usage(""), ImageUsage());
        }

        TEST("Parse Try")
        {
            ImageUsage result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_image_usage(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_image_usage("", result));
            EXPECT_EQUAL(result, ImageUsage());
        }
	}
}
