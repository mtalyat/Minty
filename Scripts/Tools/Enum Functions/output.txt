====================
	Header:
====================

String to_string(ShaderFrontFace const obj);
    ShaderFrontFace parse_to_shader_front_face(String const& string);
    Bool parse_try_shader_front_face(String const& string, ShaderFrontFace& value);
    template<>
    inline ShaderFrontFace parse_to<ShaderFrontFace>(String const& string) { return parse_to_shader_front_face(string); }
    template<>
    inline Bool parse_try<ShaderFrontFace>(String const& string, ShaderFrontFace& value) { return parse_try_shader_front_face(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(ShaderFrontFace const obj)
{
    switch (obj)
	{
		case ShaderFrontFace::CounterClockwise: return "CounterClockwise";
		case ShaderFrontFace::Clockwise: return "Clockwise";

		default: return "";
	}
}

ShaderFrontFace Minty::parse_to_shader_front_face(String const& string)
{
	if (string == "CounterClockwise") return ShaderFrontFace::CounterClockwise;
	if (string == "Clockwise") return ShaderFrontFace::Clockwise;

	return ShaderFrontFace();
}

Bool Minty::parse_try_shader_front_face(String const& string, ShaderFrontFace& value)
{
	value = parse_to_shader_front_face(string);
	return value != ShaderFrontFace();
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_ShaderFrontFace(Test& _test);

====================
	Test Source:
====================

#include "Test_ShaderFrontFace.h"
#include "Minty.h"

void test_ShaderFrontFace(Test& _test)
{
	CATEGORY(ShaderFrontFace)
	{
        std::vector<std::pair<ShaderFrontFace, String>> VALUES = {
			{ShaderFrontFace::CounterClockwise, "CounterClockwise"},
			{ShaderFrontFace::Clockwise, "Clockwise"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_shader_front_face(name), value);
            }

            EXPECT_EQUAL(parse_to_shader_front_face(""), ShaderFrontFace());
        }

        TEST("Parse Try")
        {
            ShaderFrontFace result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_shader_front_face(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_shader_front_face("", result));
            EXPECT_EQUAL(result, ShaderFrontFace());
        }
	}
}
