====================
	Header:
====================

String to_string(CoordinateMode const obj);
    CoordinateMode parse_to_coordinate_mode(String const& string);
    Bool parse_try_coordinate_mode(String const& string, CoordinateMode& value);
    template<>
    inline CoordinateMode parse_to<CoordinateMode>(String const& string) { return parse_to_coordinate_mode(string); }
    template<>
    inline Bool parse_try<CoordinateMode>(String const& string, CoordinateMode& value) { return parse_try_coordinate_mode(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(CoordinateMode const obj)
{
    switch (obj)
	{
		case CoordinateMode::Normalized: return "Normalized";
		case CoordinateMode::Pixel: return "Pixel";

		default: return "";
	}
}

CoordinateMode Minty::parse_to_coordinate_mode(String const& string)
{
	if (string == "Normalized") return CoordinateMode::Normalized;
	if (string == "Pixel") return CoordinateMode::Pixel;

	return CoordinateMode();
}

Bool Minty::parse_try_coordinate_mode(String const& string, CoordinateMode& value)
{
	value = parse_to_coordinate_mode(string);
	return value != CoordinateMode();
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_CoordinateMode(Test& _test);

====================
	Test Source:
====================

#include "Test_CoordinateMode.h"
#include "Minty.h"

void test_CoordinateMode(Test& _test)
{
	CATEGORY(CoordinateMode)
	{
        std::vector<std::pair<CoordinateMode, String>> VALUES = {
			{CoordinateMode::Normalized, "Normalized"},
			{CoordinateMode::Pixel, "Pixel"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_coordinate_mode(name), value);
            }

            EXPECT_EQUAL(parse_to_coordinate_mode(""), CoordinateMode());
        }

        TEST("Parse Try")
        {
            CoordinateMode result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_coordinate_mode(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_coordinate_mode("", result));
            EXPECT_EQUAL(result, CoordinateMode());
        }
	}
}
