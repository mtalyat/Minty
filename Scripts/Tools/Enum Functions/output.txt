====================
	Header:
====================

String to_string(ImagePixelFormat const obj);
    ImagePixelFormat parse_to_image_pixel_format(String const& string);
    Bool parse_try_image_pixel_format(String const& string, ImagePixelFormat& value);
    template<>
    inline ImagePixelFormat parse_to<ImagePixelFormat>(String const& string) { return parse_to_image_pixel_format(string); }
    template<>
    inline Bool parse_try<ImagePixelFormat>(String const& string, ImagePixelFormat& value) { return parse_try_image_pixel_format(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(ImagePixelFormat const obj)
{
    switch (obj)
	{
		case ImagePixelFormat::Gray: return "Gray";
		case ImagePixelFormat::GrayAlpha: return "GrayAlpha";
		case ImagePixelFormat::RedGreenBlue: return "RedGreenBlue";
		case ImagePixelFormat::RedGreenBlueAlpha: return "RedGreenBlueAlpha";

		default: return "";
	}
}

ImagePixelFormat Minty::parse_to_image_pixel_format(String const& string)
{
	if (string == "Gray") return ImagePixelFormat::Gray;
	if (string == "GrayAlpha") return ImagePixelFormat::GrayAlpha;
	if (string == "RedGreenBlue") return ImagePixelFormat::RedGreenBlue;
	if (string == "RedGreenBlueAlpha") return ImagePixelFormat::RedGreenBlueAlpha;

	return ImagePixelFormat();
}

Bool Minty::parse_try_image_pixel_format(String const& string, ImagePixelFormat& value)
{
	value = parse_to_image_pixel_format(string);
	return value != ImagePixelFormat();
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_ImagePixelFormat(Test& _test);

====================
	Test Source:
====================

#include "Test_ImagePixelFormat.h"
#include "Minty.h"

void test_ImagePixelFormat(Test& _test)
{
	CATEGORY(ImagePixelFormat)
	{
        std::vector<std::pair<ImagePixelFormat, String>> VALUES = {
			{ImagePixelFormat::Gray, "Gray"},
			{ImagePixelFormat::GrayAlpha, "GrayAlpha"},
			{ImagePixelFormat::RedGreenBlue, "RedGreenBlue"},
			{ImagePixelFormat::RedGreenBlueAlpha, "RedGreenBlueAlpha"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_image_pixel_format(name), value);
            }

            EXPECT_EQUAL(parse_to_image_pixel_format(""), ImagePixelFormat());
        }

        TEST("Parse Try")
        {
            ImagePixelFormat result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_image_pixel_format(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_image_pixel_format("", result));
            EXPECT_EQUAL(result, ImagePixelFormat());
        }
	}
}
