====================
	Header:
====================

String to_string(ShaderInputRate const obj);
    ShaderInputRate parse_to_shader_input_rate(String const& string);
    Bool parse_try_shader_input_rate(String const& string, ShaderInputRate& value);
    template<>
    inline ShaderInputRate parse_to<ShaderInputRate>(String const& string) { return parse_to_shader_input_rate(string); }
    template<>
    inline Bool parse_try<ShaderInputRate>(String const& string, ShaderInputRate& value) { return parse_try_shader_input_rate(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(ShaderInputRate const obj)
{
    switch (obj)
	{
		case ShaderInputRate::Vertex: return "Vertex";
		case ShaderInputRate::Instance: return "Instance";

		default: return "";
	}
}

ShaderInputRate Minty::parse_to_shader_input_rate(String const& string)
{
	if (string == "Vertex") return ShaderInputRate::Vertex;
	if (string == "Instance") return ShaderInputRate::Instance;

	return ShaderInputRate();
}

Bool Minty::parse_try_shader_input_rate(String const& string, ShaderInputRate& value)
{
	value = parse_to_shader_input_rate(string);
	return value != ShaderInputRate();
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_ShaderInputRate(Test& _test);

====================
	Test Source:
====================

#include "Test_ShaderInputRate.h"
#include "Minty.h"

void test_ShaderInputRate(Test& _test)
{
	CATEGORY(ShaderInputRate)
	{
        std::vector<std::pair<ShaderInputRate, String>> VALUES = {
			{ShaderInputRate::Vertex, "Vertex"},
			{ShaderInputRate::Instance, "Instance"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_shader_input_rate(name), value);
            }

            EXPECT_EQUAL(parse_to_shader_input_rate(""), ShaderInputRate());
        }

        TEST("Parse Try")
        {
            ShaderInputRate result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_shader_input_rate(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_shader_input_rate("", result));
            EXPECT_EQUAL(result, ShaderInputRate());
        }
	}
}
