====================
	Header:
====================

#include "Minty/Serialization/Parse.h"
#include "Minty/Serialization/ToString.h"

    String to_string(FontFlags const obj);
    FontFlags parse_to_font_flags(String const& string);
    Bool parse_try_font_flags(String const& string, FontFlags& value);
    template<>
    inline FontFlags parse_to<FontFlags>(String const& string) { return parse_to_font_flags(string); }
    template<>
    inline Bool parse_try<FontFlags>(String const& string, FontFlags& value) { return parse_try_font_flags(string, value); }

====================
	Source:
====================

using namespace Minty;

String Minty::to_string(FontFlags const obj)
{
    switch (obj)
	{
		case FontFlags::None: return "None";

		default: return "";
	}
}

FontFlags Minty::parse_to_font_flags(String const& string)
{
	if (string == "None") return FontFlags::None;

	return FontFlags();
}

Bool Minty::parse_try_font_flags(String const& string, FontFlags& value)
{
	value = parse_to_font_flags(string);
	return true;
}

====================
	Test Header:
====================

#pragma once

#include "Test.h"

void test_FontFlags(Test& _test);

====================
	Test Source:
====================

#include "Test_FontFlags.h"
#include "Minty.h"

void test_FontFlags(Test& _test)
{
	CATEGORY(FontFlags)
	{
        std::vector<std::pair<FontFlags, String>> VALUES = {
			{FontFlags::None, "None"},
        };
    
        TEST("To String")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(to_string(value), name);
            }
        }

        TEST("Parse To")
        {
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_EQUAL(parse_to_font_flags(name), value);
            }

            EXPECT_EQUAL(parse_to_font_flags(""), FontFlags());
        }

        TEST("Parse Try")
        {
            FontFlags result;
            for (auto const& [value, name] : VALUES)
            {
                EXPECT_TRUE(parse_try_font_flags(name, result));
                EXPECT_EQUAL(result, value);
            }

            EXPECT_FALSE(parse_try_font_flags("", result));
            EXPECT_EQUAL(result, FontFlags());
        }
	}
}
