#include "Test_Format.h"
#include "Minty.h"

void test_Format(Test& _test)
{
	CATEGORY(Format)
	{
		std::vector<std::pair<Format, String>> VALUES = {
			{Format::R4G4_UNORM_PACK8, "R4G4_UNORM_PACK8"},
			{Format::R4G4B4A4_UNORM_PACK16, "R4G4B4A4_UNORM_PACK16"},
			{Format::B4G4R4A4_UNORM_PACK16, "B4G4R4A4_UNORM_PACK16"},
			{Format::R5G6B5_UNORM_PACK16, "R5G6B5_UNORM_PACK16"},
			{Format::B5G6R5_UNORM_PACK16, "B5G6R5_UNORM_PACK16"},
			{Format::R5G5B5A1_UNORM_PACK16, "R5G5B5A1_UNORM_PACK16"},
			{Format::B5G5R5A1_UNORM_PACK16, "B5G5R5A1_UNORM_PACK16"},
			{Format::A1R5G5B5_UNORM_PACK16, "A1R5G5B5_UNORM_PACK16"},
			{Format::R8_UNORM, "R8_UNORM"},
			{Format::R8_SNORM, "R8_SNORM"},
			{Format::R8_USCALED, "R8_USCALED"},
			{Format::R8_SSCALED, "R8_SSCALED"},
			{Format::R8_UINT, "R8_UINT"},
			{Format::R8_SINT, "R8_SINT"},
			{Format::R8_SRGB, "R8_SRGB"},
			{Format::R8G8_UNORM, "R8G8_UNORM"},
			{Format::R8G8_SNORM, "R8G8_SNORM"},
			{Format::R8G8_USCALED, "R8G8_USCALED"},
			{Format::R8G8_SSCALED, "R8G8_SSCALED"},
			{Format::R8G8_UINT, "R8G8_UINT"},
			{Format::R8G8_SINT, "R8G8_SINT"},
			{Format::R8G8_SRGB, "R8G8_SRGB"},
			{Format::R8G8B8_UNORM, "R8G8B8_UNORM"},
			{Format::R8G8B8_SNORM, "R8G8B8_SNORM"},
			{Format::R8G8B8_USCALED, "R8G8B8_USCALED"},
			{Format::R8G8B8_SSCALED, "R8G8B8_SSCALED"},
			{Format::R8G8B8_UINT, "R8G8B8_UINT"},
			{Format::R8G8B8_SINT, "R8G8B8_SINT"},
			{Format::R8G8B8_SRGB, "R8G8B8_SRGB"},
			{Format::B8G8R8_UNORM, "B8G8R8_UNORM"},
			{Format::B8G8R8_SNORM, "B8G8R8_SNORM"},
			{Format::B8G8R8_USCALED, "B8G8R8_USCALED"},
			{Format::B8G8R8_SSCALED, "B8G8R8_SSCALED"},
			{Format::B8G8R8_UINT, "B8G8R8_UINT"},
			{Format::B8G8R8_SINT, "B8G8R8_SINT"},
			{Format::B8G8R8_SRGB, "B8G8R8_SRGB"},
			{Format::R8G8B8A8_UNORM, "R8G8B8A8_UNORM"},
			{Format::R8G8B8A8_SNORM, "R8G8B8A8_SNORM"},
			{Format::R8G8B8A8_USCALED, "R8G8B8A8_USCALED"},
			{Format::R8G8B8A8_SSCALED, "R8G8B8A8_SSCALED"},
			{Format::R8G8B8A8_UINT, "R8G8B8A8_UINT"},
			{Format::R8G8B8A8_SINT, "R8G8B8A8_SINT"},
			{Format::R8G8B8A8_SRGB, "R8G8B8A8_SRGB"},
			{Format::B8G8R8A8_UNORM, "B8G8R8A8_UNORM"},
			{Format::B8G8R8A8_SNORM, "B8G8R8A8_SNORM"},
			{Format::B8G8R8A8_USCALED, "B8G8R8A8_USCALED"},
			{Format::B8G8R8A8_SSCALED, "B8G8R8A8_SSCALED"},
			{Format::B8G8R8A8_UINT, "B8G8R8A8_UINT"},
			{Format::B8G8R8A8_SINT, "B8G8R8A8_SINT"},
			{Format::B8G8R8A8_SRGB, "B8G8R8A8_SRGB"},
			{Format::A8B8G8R8_UNORM_PACK32, "A8B8G8R8_UNORM_PACK32"},
			{Format::A8B8G8R8_SNORM_PACK32, "A8B8G8R8_SNORM_PACK32"},
			{Format::A8B8G8R8_USCALED_PACK32, "A8B8G8R8_USCALED_PACK32"},
			{Format::A8B8G8R8_SSCALED_PACK32, "A8B8G8R8_SSCALED_PACK32"},
			{Format::A8B8G8R8_UINT_PACK32, "A8B8G8R8_UINT_PACK32"},
			{Format::A8B8G8R8_SINT_PACK32, "A8B8G8R8_SINT_PACK32"},
			{Format::A8B8G8R8_SRGB_PACK32, "A8B8G8R8_SRGB_PACK32"},
			{Format::A2R10G10B10_UNORM_PACK32, "A2R10G10B10_UNORM_PACK32"},
			{Format::A2R10G10B10_SNORM_PACK32, "A2R10G10B10_SNORM_PACK32"},
			{Format::A2R10G10B10_USCALED_PACK32, "A2R10G10B10_USCALED_PACK32"},
			{Format::A2R10G10B10_SSCALED_PACK32, "A2R10G10B10_SSCALED_PACK32"},
			{Format::A2R10G10B10_UINT_PACK32, "A2R10G10B10_UINT_PACK32"},
			{Format::A2R10G10B10_SINT_PACK32, "A2R10G10B10_SINT_PACK32"},
			{Format::A2B10G10R10_UNORM_PACK32, "A2B10G10R10_UNORM_PACK32"},
			{Format::A2B10G10R10_SNORM_PACK32, "A2B10G10R10_SNORM_PACK32"},
			{Format::A2B10G10R10_USCALED_PACK32, "A2B10G10R10_USCALED_PACK32"},
			{Format::A2B10G10R10_SSCALED_PACK32, "A2B10G10R10_SSCALED_PACK32"},
			{Format::A2B10G10R10_UINT_PACK32, "A2B10G10R10_UINT_PACK32"},
			{Format::A2B10G10R10_SINT_PACK32, "A2B10G10R10_SINT_PACK32"},
			{Format::R16_UNORM, "R16_UNORM"},
			{Format::R16_SNORM, "R16_SNORM"},
			{Format::R16_USCALED, "R16_USCALED"},
			{Format::R16_SSCALED, "R16_SSCALED"},
			{Format::R16_UINT, "R16_UINT"},
			{Format::R16_SINT, "R16_SINT"},
			{Format::R16_SFLOAT, "R16_SFLOAT"},
			{Format::R16G16_UNORM, "R16G16_UNORM"},
			{Format::R16G16_SNORM, "R16G16_SNORM"},
			{Format::R16G16_USCALED, "R16G16_USCALED"},
			{Format::R16G16_SSCALED, "R16G16_SSCALED"},
			{Format::R16G16_UINT, "R16G16_UINT"},
			{Format::R16G16_SINT, "R16G16_SINT"},
			{Format::R16G16_SFLOAT, "R16G16_SFLOAT"},
			{Format::R16G16B16_UNORM, "R16G16B16_UNORM"},
			{Format::R16G16B16_SNORM, "R16G16B16_SNORM"},
			{Format::R16G16B16_USCALED, "R16G16B16_USCALED"},
			{Format::R16G16B16_SSCALED, "R16G16B16_SSCALED"},
			{Format::R16G16B16_UINT, "R16G16B16_UINT"},
			{Format::R16G16B16_SINT, "R16G16B16_SINT"},
			{Format::R16G16B16_SFLOAT, "R16G16B16_SFLOAT"},
			{Format::R16G16B16A16_UNORM, "R16G16B16A16_UNORM"},
			{Format::R16G16B16A16_SNORM, "R16G16B16A16_SNORM"},
			{Format::R16G16B16A16_USCALED, "R16G16B16A16_USCALED"},
			{Format::R16G16B16A16_SSCALED, "R16G16B16A16_SSCALED"},
			{Format::R16G16B16A16_UINT, "R16G16B16A16_UINT"},
			{Format::R16G16B16A16_SINT, "R16G16B16A16_SINT"},
			{Format::R16G16B16A16_SFLOAT, "R16G16B16A16_SFLOAT"},
			{Format::R32_UINT, "R32_UINT"},
			{Format::R32_SINT, "R32_SINT"},
			{Format::R32_SFLOAT, "R32_SFLOAT"},
			{Format::R32G32_UINT, "R32G32_UINT"},
			{Format::R32G32_SINT, "R32G32_SINT"},
			{Format::R32G32_SFLOAT, "R32G32_SFLOAT"},
			{Format::R32G32B32_UINT, "R32G32B32_UINT"},
			{Format::R32G32B32_SINT, "R32G32B32_SINT"},
			{Format::R32G32B32_SFLOAT, "R32G32B32_SFLOAT"},
			{Format::R32G32B32A32_UINT, "R32G32B32A32_UINT"},
			{Format::R32G32B32A32_SINT, "R32G32B32A32_SINT"},
			{Format::R32G32B32A32_SFLOAT, "R32G32B32A32_SFLOAT"},
			{Format::R64_UINT, "R64_UINT"},
			{Format::R64_SINT, "R64_SINT"},
			{Format::R64_SFLOAT, "R64_SFLOAT"},
			{Format::R64G64_UINT, "R64G64_UINT"},
			{Format::R64G64_SINT, "R64G64_SINT"},
			{Format::R64G64_SFLOAT, "R64G64_SFLOAT"},
			{Format::R64G64B64_UINT, "R64G64B64_UINT"},
			{Format::R64G64B64_SINT, "R64G64B64_SINT"},
			{Format::R64G64B64_SFLOAT, "R64G64B64_SFLOAT"},
			{Format::R64G64B64A64_UINT, "R64G64B64A64_UINT"},
			{Format::R64G64B64A64_SINT, "R64G64B64A64_SINT"},
			{Format::R64G64B64A64_SFLOAT, "R64G64B64A64_SFLOAT"},
		};

		TEST("To String")
		{
			for (auto const& [value, name] : VALUES)
			{
				EXPECT_EQUAL(to_string(value), name);
			}
		}

		TEST("Parse To")
		{
			for (auto const& [value, name] : VALUES)
			{
				EXPECT_EQUAL(parse_to_format(name), value);
			}

			EXPECT_EQUAL(parse_to_format(""), Format());
		}

		TEST("Parse Try")
		{
			Format result;
			for (auto const& [value, name] : VALUES)
			{
				EXPECT_TRUE(parse_try_format(name, result));
				EXPECT_EQUAL(result, value);
			}

			EXPECT_FALSE(parse_try_format("", result));
			EXPECT_EQUAL(result, Format());
		}
	}
}