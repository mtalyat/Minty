#include "pch.h"
#include "Key.h"

using namespace Minty;

String Minty::to_string(Key const obj)
{
	switch (obj)
	{
	case Key::Space: return "Space";
	case Key::Apostrophe: return "Apostrophe";
	case Key::Comma: return "Comma";
	case Key::Minus: return "Minus";
	case Key::Period: return "Period";
	case Key::Slash: return "Slash";
	case Key::D0: return "D0";
	case Key::D1: return "D1";
	case Key::D2: return "D2";
	case Key::D3: return "D3";
	case Key::D4: return "D4";
	case Key::D5: return "D5";
	case Key::D6: return "D6";
	case Key::D7: return "D7";
	case Key::D8: return "D8";
	case Key::D9: return "D9";
	case Key::Semicolon: return "Semicolon";
	case Key::Equal: return "Equal";
	case Key::A: return "A";
	case Key::B: return "B";
	case Key::C: return "C";
	case Key::D: return "D";
	case Key::E: return "E";
	case Key::F: return "F";
	case Key::G: return "G";
	case Key::H: return "H";
	case Key::I: return "I";
	case Key::J: return "J";
	case Key::K: return "K";
	case Key::L: return "L";
	case Key::M: return "M";
	case Key::N: return "N";
	case Key::O: return "O";
	case Key::P: return "P";
	case Key::Q: return "Q";
	case Key::R: return "R";
	case Key::S: return "S";
	case Key::T: return "T";
	case Key::U: return "U";
	case Key::V: return "V";
	case Key::W: return "W";
	case Key::X: return "X";
	case Key::Y: return "Y";
	case Key::Z: return "Z";
	case Key::LeftBracket: return "LeftBracket";
	case Key::Backslash: return "Backslash";
	case Key::RightBracket: return "RightBracket";
	case Key::Grave: return "Grave";
	case Key::Escape: return "Escape";
	case Key::Enter: return "Enter";
	case Key::Tab: return "Tab";
	case Key::Backspace: return "Backspace";
	case Key::Insert: return "Insert";
	case Key::Delete: return "Delete";
	case Key::Right: return "Right";
	case Key::Left: return "Left";
	case Key::Down: return "Down";
	case Key::Up: return "Up";
	case Key::PageUp: return "PageUp";
	case Key::PageDown: return "PageDown";
	case Key::Home: return "Home";
	case Key::End: return "End";
	case Key::CapsLock: return "CapsLock";
	case Key::ScrollLock: return "ScrollLock";
	case Key::NumLock: return "NumLock";
	case Key::PrintScreen: return "PrintScreen";
	case Key::Pause: return "Pause";
	case Key::F1: return "F1";
	case Key::F2: return "F2";
	case Key::F3: return "F3";
	case Key::F4: return "F4";
	case Key::F5: return "F5";
	case Key::F6: return "F6";
	case Key::F7: return "F7";
	case Key::F8: return "F8";
	case Key::F9: return "F9";
	case Key::F10: return "F10";
	case Key::F11: return "F11";
	case Key::F12: return "F12";
	case Key::F13: return "F13";
	case Key::F14: return "F14";
	case Key::F15: return "F15";
	case Key::F16: return "F16";
	case Key::F17: return "F17";
	case Key::F18: return "F18";
	case Key::F19: return "F19";
	case Key::F20: return "F20";
	case Key::F21: return "F21";
	case Key::F22: return "F22";
	case Key::F23: return "F23";
	case Key::F24: return "F24";
	case Key::F25: return "F25";
	case Key::KeyPad0: return "KeyPad0";
	case Key::KeyPad1: return "KeyPad1";
	case Key::KeyPad2: return "KeyPad2";
	case Key::KeyPad3: return "KeyPad3";
	case Key::KeyPad4: return "KeyPad4";
	case Key::KeyPad5: return "KeyPad5";
	case Key::KeyPad6: return "KeyPad6";
	case Key::KeyPad7: return "KeyPad7";
	case Key::KeyPad8: return "KeyPad8";
	case Key::KeyPad9: return "KeyPad9";
	case Key::KeyPadDecimal: return "KeyPadDecimal";
	case Key::KeyPadDivide: return "KeyPadDivide";
	case Key::KeyPadMultiply: return "KeyPadMultiply";
	case Key::KeyPadSubtract: return "KeyPadSubtract";
	case Key::KeyPadAdd: return "KeyPadAdd";
	case Key::KeyPadEnter: return "KeyPadEnter";
	case Key::KeyPadEqual: return "KeyPadEqual";
	case Key::LeftShift: return "LeftShift";
	case Key::LeftControl: return "LeftControl";
	case Key::LeftAlt: return "LeftAlt";
	case Key::LeftSuper: return "LeftSuper";
	case Key::RightShift: return "RightShift";
	case Key::RightControl: return "RightControl";
	case Key::RightAlt: return "RightAlt";
	case Key::RightSuper: return "RightSuper";
	case Key::Menu: return "Menu";

	default: return "";
	}
}

Key Minty::parse_to_key(String const& string)
{
	if (string == "Space") return Key::Space;
	if (string == "Apostrophe") return Key::Apostrophe;
	if (string == "Comma") return Key::Comma;
	if (string == "Minus") return Key::Minus;
	if (string == "Period") return Key::Period;
	if (string == "Slash") return Key::Slash;
	if (string == "D0") return Key::D0;
	if (string == "D1") return Key::D1;
	if (string == "D2") return Key::D2;
	if (string == "D3") return Key::D3;
	if (string == "D4") return Key::D4;
	if (string == "D5") return Key::D5;
	if (string == "D6") return Key::D6;
	if (string == "D7") return Key::D7;
	if (string == "D8") return Key::D8;
	if (string == "D9") return Key::D9;
	if (string == "Semicolon") return Key::Semicolon;
	if (string == "Equal") return Key::Equal;
	if (string == "A") return Key::A;
	if (string == "B") return Key::B;
	if (string == "C") return Key::C;
	if (string == "D") return Key::D;
	if (string == "E") return Key::E;
	if (string == "F") return Key::F;
	if (string == "G") return Key::G;
	if (string == "H") return Key::H;
	if (string == "I") return Key::I;
	if (string == "J") return Key::J;
	if (string == "K") return Key::K;
	if (string == "L") return Key::L;
	if (string == "M") return Key::M;
	if (string == "N") return Key::N;
	if (string == "O") return Key::O;
	if (string == "P") return Key::P;
	if (string == "Q") return Key::Q;
	if (string == "R") return Key::R;
	if (string == "S") return Key::S;
	if (string == "T") return Key::T;
	if (string == "U") return Key::U;
	if (string == "V") return Key::V;
	if (string == "W") return Key::W;
	if (string == "X") return Key::X;
	if (string == "Y") return Key::Y;
	if (string == "Z") return Key::Z;
	if (string == "LeftBracket") return Key::LeftBracket;
	if (string == "Backslash") return Key::Backslash;
	if (string == "RightBracket") return Key::RightBracket;
	if (string == "Grave") return Key::Grave;
	if (string == "Escape") return Key::Escape;
	if (string == "Enter") return Key::Enter;
	if (string == "Tab") return Key::Tab;
	if (string == "Backspace") return Key::Backspace;
	if (string == "Insert") return Key::Insert;
	if (string == "Delete") return Key::Delete;
	if (string == "Right") return Key::Right;
	if (string == "Left") return Key::Left;
	if (string == "Down") return Key::Down;
	if (string == "Up") return Key::Up;
	if (string == "PageUp") return Key::PageUp;
	if (string == "PageDown") return Key::PageDown;
	if (string == "Home") return Key::Home;
	if (string == "End") return Key::End;
	if (string == "CapsLock") return Key::CapsLock;
	if (string == "ScrollLock") return Key::ScrollLock;
	if (string == "NumLock") return Key::NumLock;
	if (string == "PrintScreen") return Key::PrintScreen;
	if (string == "Pause") return Key::Pause;
	if (string == "F1") return Key::F1;
	if (string == "F2") return Key::F2;
	if (string == "F3") return Key::F3;
	if (string == "F4") return Key::F4;
	if (string == "F5") return Key::F5;
	if (string == "F6") return Key::F6;
	if (string == "F7") return Key::F7;
	if (string == "F8") return Key::F8;
	if (string == "F9") return Key::F9;
	if (string == "F10") return Key::F10;
	if (string == "F11") return Key::F11;
	if (string == "F12") return Key::F12;
	if (string == "F13") return Key::F13;
	if (string == "F14") return Key::F14;
	if (string == "F15") return Key::F15;
	if (string == "F16") return Key::F16;
	if (string == "F17") return Key::F17;
	if (string == "F18") return Key::F18;
	if (string == "F19") return Key::F19;
	if (string == "F20") return Key::F20;
	if (string == "F21") return Key::F21;
	if (string == "F22") return Key::F22;
	if (string == "F23") return Key::F23;
	if (string == "F24") return Key::F24;
	if (string == "F25") return Key::F25;
	if (string == "KeyPad0") return Key::KeyPad0;
	if (string == "KeyPad1") return Key::KeyPad1;
	if (string == "KeyPad2") return Key::KeyPad2;
	if (string == "KeyPad3") return Key::KeyPad3;
	if (string == "KeyPad4") return Key::KeyPad4;
	if (string == "KeyPad5") return Key::KeyPad5;
	if (string == "KeyPad6") return Key::KeyPad6;
	if (string == "KeyPad7") return Key::KeyPad7;
	if (string == "KeyPad8") return Key::KeyPad8;
	if (string == "KeyPad9") return Key::KeyPad9;
	if (string == "KeyPadDecimal") return Key::KeyPadDecimal;
	if (string == "KeyPadDivide") return Key::KeyPadDivide;
	if (string == "KeyPadMultiply") return Key::KeyPadMultiply;
	if (string == "KeyPadSubtract") return Key::KeyPadSubtract;
	if (string == "KeyPadAdd") return Key::KeyPadAdd;
	if (string == "KeyPadEnter") return Key::KeyPadEnter;
	if (string == "KeyPadEqual") return Key::KeyPadEqual;
	if (string == "LeftShift") return Key::LeftShift;
	if (string == "LeftControl") return Key::LeftControl;
	if (string == "LeftAlt") return Key::LeftAlt;
	if (string == "LeftSuper") return Key::LeftSuper;
	if (string == "RightShift") return Key::RightShift;
	if (string == "RightControl") return Key::RightControl;
	if (string == "RightAlt") return Key::RightAlt;
	if (string == "RightSuper") return Key::RightSuper;
	if (string == "Menu") return Key::Menu;

	return Key();
}

Bool Minty::parse_try_key(String const& string, Key& value)
{
	value = parse_to_key(string);
	return true;
}